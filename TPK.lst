JWasm v2.11, Oct 20 2013
TPK.asm
                                ;       Program: TPK - Timer Pre-emptive Kernel, otherwise known as Kernel Sanders
                                ;   Description: Demonstrates a TPK that switches between 32 different tasks
                                ;        Author: Jared Messer and Mark Bixler
                                ;          Date: 
                                ;         Notes: 
                                ; Help Received: 

                                ; Mr. J, does this need to be stated twice?
                                .model tiny
                                .386
                                .stack 100h

                                .data
 = SOME ADDRESS                 TASK_STACKS	equ	SOME ADDRESS
 = SOME ADDRESS                 SP_ARRAY	equ	SOME ADDRESS
00000000  0000                  counter		word	0
00000002  48656C6C6F20576F72    message 	byte	"Hello World!!", 0
00000000                        .code

00000000                         task1 proc
                                 
00000000                         task1_start: 
00000000  50                    	push	ax
00000001  B07C                  	 mov	al, '|'
00000003  26A20000              	 mov	es:[0], al
00000007  B02F                  	 mov	al, '/'
00000009  26A20000              	 mov	es:[0], al
0000000D  B02D                  	 mov	al, '-'
0000000F  26A20000              	 mov	es:[0], al
00000013  B05C                  	 mov	al, '\'
00000015  26A20000              	 mov	es:[0], al
00000019  58                    	 pop	ax
                                	 ;call yield
0000001A  EBE4                  	 jmp	task1_start
0000001C                         task1 endp

0000001C                        task2 proc
0000001C                        task2_start:
0000001C  50                    	push	ax
0000001D  56                    	push	si
0000001E  B03E                  	mov	al, '>'
00000020  8B360000              	mov si, [counter]
00000024  268804                	mov	es:[si], al
00000027  FF060000              	inc	[counter]
0000002B  833E000050            	cmp	[counter], 80
00000030  7402                  	je	reset_counter
00000032  EB06                  	jmp	after_reset_counter
00000034                        reset_counter:
00000034  C70600000000          	mov counter, 0
0000003A                        after_reset_counter:
0000003A  5E                    	pop si
0000003B  58                    	pop	ax
0000003C  EBDE                  	jmp task2_start
0000003E                        task2 endp

0000003E                        task3 proc
0000003E                        task3 endp

0000003E                        task4 proc
0000003E                        task4 endp

0000003E                        task5 proc
0000003E                        task5 endp

0000003E                        task6 proc
0000003E                        task6 endp

                                ; Function: prints a NUL-terminated string
                                ; Receives: DX=offset of string (in DS)
                                ; Returns: none
                                ; Requires: NUL terminator at end of string
                                ; Clobbers: none
0000003E                        print_string proc
0000003E  50                    	push	ax
0000003F  56                    	push	si
                                	
00000040  8BF2                  	mov	si, dx
00000042                        ps_loop:
00000042  AC                    	lodsb
00000043  3C00                  	cmp	al, 0
00000045  7406                  	je	ps_done
00000047  B40E                  	mov	ah, 0eh
00000049  CD10                  	int	10h
0000004B  EBF5                  	jmp	ps_loop
0000004D                        ps_done:

0000004D  5E                    	pop	si
0000004E  58                    	pop	ax
0000004F                        	ret
00000050                        print_string endp

00000050                        yield proc
                                	; push all regs
                                	; push all flags minus SP
                                	; swap sp's with target task
00000050                        yield_mid:
                                	; pop all flags
                                	; pop all regs
00000050                        	ret
00000051                        yield endp


00000051                        main proc
00000051  B80000                	mov  ax, DGROUP			; @data is the data segment that DOS sets up.
00000054  8ED8                  	mov  ds, ax			; These two lines are required for all programs
                                	
                                	; yield kick-start logic
                                	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                	
                                	; move a saved SP into SP
                                	;jmp	yield_mid
                                	
                                	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                	
                                	
                                	; Frame buffer
00000056  B800B8                	mov	ax, 0B800h
00000059  8EC0                  	mov	es, ax
                                	
                                	; Mr. J: is each task a proc
                                	; Mr. J: what is wrong with task2? (look at P8)
                                	
                                	; Task Stacks will start at address something
                                	
                                	; Hello world
                                	;mov dx, OFFSET message 
                                	;call print_string
                                	
                                	
0000005B  B400                  	mov ah, 0
0000005D  B003                  	mov al, 03h ; set graphics mode to text
0000005F  CD10                  	int 10h
                                	
                                	;call task1
00000061  E8B8FF                	call task2
                                	
                                	;exit
00000064  B44C                  	mov ah, 4Ch
00000066  CD21                  	int 21h
00000068                        main endp

                                end main


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

$$SYMBOLS  . . . . . . . . . . .        32 Bit   00000244 Byte    Private 'DEBSYM'
$$TYPES  . . . . . . . . . . . .        32 Bit   000000B6 Byte    Private 'DEBTYP'
DGROUP . . . . . . . . . . . . .        GROUP
_TEXT  . . . . . . . . . . . . .        16 Bit   0068     Word    Public  'CODE'
_DATA  . . . . . . . . . . . . .        16 Bit   0010     Word    Public  'DATA'
STACK  . . . . . . . . . . . . .        16 Bit   0100     Para    Stack   'STACK'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

main . . . . . . . . . . . . . .        P Near   0051     _TEXT    0017 Private  
print_string . . . . . . . . . .        P Near   003E     _TEXT    0012 Private  
task1  . . . . . . . . . . . . .        P Near   0000     _TEXT    001C Private  
task2  . . . . . . . . . . . . .        P Near   001C     _TEXT    0022 Private  
task3  . . . . . . . . . . . . .        P Near   003E     _TEXT    0000 Private  
task4  . . . . . . . . . . . . .        P Near   003E     _TEXT    0000 Private  
task5  . . . . . . . . . . . . .        P Near   003E     _TEXT    0000 Private  
task6  . . . . . . . . . . . . .        P Near   003E     _TEXT    0000 Private  
yield  . . . . . . . . . . . . .        P Near   0050     _TEXT    0001 Private  


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             0h 
@Model . . . . . . . . . . . . .        Number             1h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   DGROUP
@stack . . . . . . . . . . . . .        Text   DGROUP
SP_ARRAY . . . . . . . . . . . .        Text   SOME ADDRESS
TASK_STACKS  . . . . . . . . . .        Text   SOME ADDRESS
after_reset_counter  . . . . . .        L Near            3Ah _TEXT 
counter  . . . . . . . . . . . .        Word               0h _DATA 
message  . . . . . . . . . . . .        Byte[14]           2h _DATA 
ps_done  . . . . . . . . . . . .        L Near            4Dh _TEXT 
ps_loop  . . . . . . . . . . . .        L Near            42h _TEXT 
reset_counter  . . . . . . . . .        L Near            34h _TEXT 
task1_start  . . . . . . . . . .        L Near             0h _TEXT 
task2_start  . . . . . . . . . .        L Near            1Ch _TEXT 
yield_mid  . . . . . . . . . . .        L Near            50h _TEXT 

TPK.asm: 142 lines, 2 passes, 0 ms, 0 warnings, 0 errors
