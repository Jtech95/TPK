JWasm v2.11, Oct 20 2013
TPK.asm
                                ;       Program: TPK - Timer Pre-emptive Kernel, otherwise known as Kernel Sanders
                                ;   Description: Demonstrates a TPK that switches between 32 different tasks
                                ;        Author: Jared Messer and Mark Bixler
                                ;          Date: 
                                ;         Notes: 
                                ; Help Received: 

                                ; Mr. J, does this need to be stated twice?
                                .model tiny
                                .386
                                .stack 100h

                                .data
 = SOME ADDRESS                 TASK_STACKS	equ	SOME ADDRESS
 = SOME ADDRESS                 SP_ARRAY	equ	SOME ADDRESS
00000000  00                    counter		byte	0
00000001  48656C6C6F20576F72    message 	byte	"Hello World!!", 0
00000000                        .code

                                ; task1 proc
                                ; task1_start:
                                	; push	ax
                                	; mov	al, '|'
                                	; mov	es:[0], al
                                	; mov	al, '/'
                                	; mov	es:[0], al
                                	; mov	al, '-'
                                	; mov	es:[0], al
                                	; mov	al, '\'
                                	; mov	es:[0], al
                                	; pop	ax
                                	; call yield
                                	; loop	task1_start
                                ; task1 endp

                                ; task2 proc
                                	; push	ax
                                	; mov	al, '>'
                                	; mov	es:[counter], al
                                	; inc	[counter]
                                	; cmp	[counter], 80
                                	; je	reset_counter
                                	; jmp	after_reset_counter
                                ; reset_counter:
                                	; xor	[counter], [counter]
                                ; after_reset_counter:
                                	; pop	ax
                                	; ret
                                ; task2 endp

                                ; task3 proc
                                ; task3 endp

                                ; task4 proc
                                ; task4 endp

                                ; task5 proc
                                ; task5 endp

                                ; task6 proc
                                ; task6 endp

                                ; Function: prints a NUL-terminated string
                                ; Receives: DX=offset of string (in DS)
                                ; Returns: none
                                ; Requires: NUL terminator at end of string
                                ; Clobbers: none
00000000                        print_string proc
00000000  50                    	push	ax
00000001  56                    	push	si
                                	
00000002  8BF2                  	mov	si, dx
00000004                        ps_loop:
00000004  AC                    	lodsb
00000005  3C00                  	cmp	al, 0
00000007  7406                  	je	ps_done
00000009  B40E                  	mov	ah, 0eh
0000000B  CD10                  	int	10h
0000000D  EBF5                  	jmp	ps_loop
0000000F                        ps_done:

0000000F  5E                    	pop	si
00000010  58                    	pop	ax
00000011  C3                    	retn
00000012                        print_string endp

                                ; yield proc
                                	; ; push all regs
                                	; ; push all flags minus SP
                                	; ; swap sp's with target task
                                ; yield_mid:
                                	; ; pop all flags
                                	; ; pop all regs
                                	; ret
                                ; yield endp


00000012                        main proc
00000012  B80000                	mov  ax, DGROUP			; @data is the data segment that DOS sets up.
00000015  8ED8                  	mov  ds, ax			; These two lines are required for all programs
                                	
                                	; yield kick-start logic
                                	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                	
                                	; move a saved SP into SP
                                	;jmp	yield_mid
                                	
                                	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                	
                                	
                                	; Frame buffer
00000017  B800B8                	mov	ax, 0B800h
0000001A  8EC0                  	mov	es, ax
                                	
                                	; Mr. J: is each task a proc
                                	; Mr. J: what is wrong with task2? (look at P8)
                                	
                                	; Task Stacks will start at address something
                                	
                                	; Hello world
0000001C  BA0100                	mov dx, OFFSET message 
0000001F  E8DEFF                	call print_string
                                	
                                	
                                	;exit
00000022  B44C                  	mov ah, 4Ch
00000024  CD21                  	int 21h
00000026                        main endp

                                end main


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .        GROUP
_TEXT  . . . . . . . . . . . . .        16 Bit   0026     Word    Public  'CODE'
_DATA  . . . . . . . . . . . . .        16 Bit   000F     Word    Public  'DATA'
STACK  . . . . . . . . . . . . .        16 Bit   0100     Para    Stack   'STACK'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

main . . . . . . . . . . . . . .        P Near   0012     _TEXT    0014 Public   
print_string . . . . . . . . . .        P Near   0000     _TEXT    0012 Public   
  ps_done  . . . . . . . . . . .        L Near   000F     _TEXT
  ps_loop  . . . . . . . . . . .        L Near   0004     _TEXT


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             0h 
@Model . . . . . . . . . . . . .        Number             1h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   DGROUP
@stack . . . . . . . . . . . . .        Text   DGROUP
SP_ARRAY . . . . . . . . . . . .        Text   SOME ADDRESS
TASK_STACKS  . . . . . . . . . .        Text   SOME ADDRESS
counter  . . . . . . . . . . . .        Byte               0h _DATA 
message  . . . . . . . . . . . .        Byte[14]           1h _DATA 

TPK.asm: 130 lines, 2 passes, 0 ms, 0 warnings, 0 errors
